[Unit]
After=network.target
After=docker.service
Requires=docker.service

Description={{ description }}

StartLimitIntervalSec=600
StartLimitBurst=10

[Service]
# TODO: Type=simple

WorkingDirectory={{ dir }}
ReadWritePaths={{ dir }}

User={{ user }}
Group={{ group }}

# TODO: hardening
# https://gist.github.com/ageis/f5595e59b1cddb1513d1b425a323db04
#
# DynamicUser=yes implies ProtectSystem=strict + ProtectHome=read-only + PrivateTmp=yes + RemoveIPC=yes
#
# These sand-boxing options turn off write access to pretty much the whole OS
# directory tree, with a few relevant exceptions, such as the API file systems
# /proc, /sys and so on, as well as /tmp and /var/tmp. (BTW: setting these two
# options on your regular services that do not use DynamicUser= is a good idea
# too, as it drastically reduces the exposure of the system to exploited services.)

ProtectSystem=strict
ProtectControlGroups=yes
PrivateDevices=yes
ProtectHome=yes
ProtectKernelLogs=yes
ProtectKernelModules=yes
ProtectKernelTunables=yes
PrivateTmp=yes
RemoveIPC=yes
RestrictSUIDSGID=yes

# always restart the service
Restart=always

# sleep delay prior to restart
RestartSec=10

# maximum time until startup completion is required
TimeoutStartSec=300

# clean up old containers
ExecStartPre=/usr/bin/docker --log-level error compose down --timeout 60
ExecStartPre=/usr/bin/docker --log-level error compose rm --force --stop

# lifecycle hook
ExecStartPre=/usr/local/bin/lifecycle {{ services_basedir }}/%i start-pre

# lifecycle hook
ExecStartPost=/usr/local/bin/lifecycle {{ services_basedir }}/%i start-post

# start containers
ExecStart=/usr/bin/docker compose up --abort-on-container-exit --quiet-pull

# stop containers
ExecStop=/usr/bin/docker compose down --timeout 60

# lifecycle hook
ExecStopPost=/usr/local/bin/lifecycle {{ services_basedir }}/%i stop-post

[Install]

# When the service starts, it should happen after the system and network are ready, that is why we declare this relation.
# https://unix.stackexchange.com/questions/506347/why-do-most-systemd-examples-contain-wantedby-multi-user-target/506374#506374
WantedBy=multi-user.target
